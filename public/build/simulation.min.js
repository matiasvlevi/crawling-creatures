/*!
 genetic-creatures v1.0.0 by Matias Vazquez-Levi 
 Build date: 2023-07-21
 License: MIT
*/
class Graph{constructor({x:t,y:e,w:i,h:s,xBounds:a,yBounds:n}){this.pos=createVector(t,e),this.size=createVector(i,s),this.bounds=createVector(a,n),this.data={},this.colors={},this.length=0}static genColor(){let t=floor(random(0,3));return color(random(0==t?155:0,0==t?255:105),random(1==t?155:0,1==t?255:105),random(2==t?155:0,2==t?255:105))}toData(){return{data:this.data,colors:this.colors,length:this.length,bound:this.bounds.y}}fromData(t){let e=t;for(key in e.colors)this.colors[key]=color(...e.colors[key].levels);this.data=e.data,this.length=e.length,this.bounds.y=e.bound}addType(t,e=Graph.genColor()){this.data[t]=[],this.colors[t]=e}insert(t,e){this.addType(t),this.data[t]=new Array(this.length-1).fill(0),this.data[t].push(e);let i=0;for(t in this.data)i+=this.data[t][this.length-1];for(t in this.data)this.data[t][this.length-1]=this.data[t][this.length-1]/i*this.bounds.y}update(t){let e=0;for(key in t)e+=t[key];for(key in t)this.data[key].push(t[key]/e*this.bounds.y);this.length++}scale(t){return t/this.bounds.y*this.size.y}draw(){push(),stroke(200),line(this.pos.x,this.pos.y,this.pos.x,this.pos.y+this.size.y),line(this.pos.x,this.pos.y+this.size.y,this.pos.x+this.size.x,this.pos.y+this.size.y),noStroke(),fill(200),textSize(12),text(this.length-1,this.pos.x+this.size.x-12,this.pos.y+this.size.y-4),text(this.bounds.y,this.pos.x+4,this.pos.y);let t=Object.keys(this.data),e=new Array(this.length).fill(0);for(let i=0;i<t.length;i++){fill(this.colors[t[i]]),beginShape(),vertex(this.pos.x,this.pos.y+this.scale(e[0]));for(let t=1;t<this.length;t++)vertex(this.pos.x+t/(this.length-1)*this.size.x,this.pos.y+this.scale(e[t]));for(let s=this.length;s>0;s--)vertex(this.pos.x+s/(this.length-1)*this.size.x,this.pos.y+this.scale(e[s]+this.data[t[i]][s]));vertex(this.pos.x,this.pos.y+this.scale(e[0]+this.data[t[i]][0])),endShape(OPEN),noStroke(),fill(255),this.data[t[i]][this.length-1]>0&&(textAlign(LEFT),text(t[i],this.pos.x+this.size.x+12,this.pos.y+this.scale(e[this.length-1]+this.data[t[i]][this.length-1]/2)));for(let s=1;s<this.length;s++)e[s]+=this.data[t[i]][s];e[0]+=this.data[t[i]][0]}pop()}}class Server{constructor(){}static async http({ip:t,port:e,path:i,method:s,body:a}){return fetch(`http://${t}:${e}/${i}`,{method:s,body:void 0===a?void 0:JSON.stringify(a),headers:{Accept:"application/json","Content-Type":"application/json"}}).then((t=>t.json()))}}class Simulation{constructor({mutationRate:t,distance:e,roundTime:i,firstPopulation:s,population:a}){this.window={x:window.innerWidth,y:window.innerHeight},this.spawn={x:260,y:this.window.y-360},this.cycles=1,this.mutationRate=t||1.5,this.distance=e||1e3,this.roundTime=i||2500,this.firstGenPop=s||128,this.genPop=a||48,this._timer=0,this.offset=0,this.running=!0,this.currentGen=0,this.currentIndex=0,this.bests=[],this.bestIndex=0,this.bestScore=0,this.engine=Matter.Engine.create({positionIterations:4,velocityIterations:4,constraintIterations:7}),this.world=this.engine.world,this.world.gravity.y=1.5;let n=this.makeRandomGeneration();this.baseStats=n.defaultStats,this.graph=this.initGraph(n),this.creature=new Creature(this,this.spawn.x,this.spawn.y,random(3,6),this.creatureConfigs[0],this.creatureConfigs),this.obstacles=makeObstacles(this),this.obstacles.push(makeGround(this)),this.btnIncrementCycle=new Button({x:110,y:215,w:50,h:50,text:">",event:()=>{this.cycles<99?this.cycles+=1:this.cycles=100}}),this.btnDecrementCycle=new Button({x:30,y:215,w:50,h:50,text:"<",event:()=>{this.cycles>1?this.cycles-=1:this.cycles=1}})}initGraph(t){let e=new Graph({x:this.window.x-500,y:20,w:350,h:350,yBounds:this.genPop,xBounds:10});for(let i=0;i<Object.keys(t.stats).length;i++)e.addType(this.creatureConfigs[i].lastname);return e.update(t.stats),e}update(){if(this.running)for(let t=0;t<this.cycles;t++)Matter.Engine.update(this.engine),this.creature.update(),(this.creature.getPos()<this.offset||this.creature.getPos()>1.1*this.distance)&&(this.nextCreature(),this._timer=0),this._timer>this.roundTime?(this._timer=0,this.nextCreature()):this._timer++}draw(){push(),translate(this.offset,0),push(),stroke(255,0,0),strokeWeight(3),noFill(),ellipse(this.spawn.x,this.spawn.y,260),pop(),this.obstacles.forEach((t=>t.draw())),stroke(255,0,0,80),strokeWeight(2),this.endLine(),this.scoreBoard(),this.running&&this.creature.draw(),pop(),this.running||this.endMessage(),this.btnIncrementCycle.draw(),this.btnDecrementCycle.draw(),this.graph.draw()}events(){keyIsPressed&&(keyCode===LEFT_ARROW?this.offset+=20:keyCode===RIGHT_ARROW?this.offset-=20:keyCode===DOWN_ARROW&&(this.offset=0))}}let simulation;Simulation.loadSims=async function(){const t=document.querySelector(".menu"),e=document.querySelector(".loadBtn");if("none"!==t.style.display)return t.replaceChildren(),t.style.display="none",void(e.innerHTML="Load Simulation");const i=JSON.parse(localStorage.getItem("savedSimulations"));Object.values(i).forEach((i=>{let s=document.createElement("div");s.setAttribute("class","element"),s.setAttribute("onClick",`simulation.loadSimulation("${i.meta.name}")`);let a=document.createElement("h4");a.innerHTML=i.meta.name;let n=document.createElement("p");n.innerHTML=i.meta.description,s.appendChild(a),s.appendChild(n),t.appendChild(s),t.style.display="flex",e.innerHTML="Close"}))},Simulation.prototype.clearMatterBodies=function(t){t.forEach((t=>{Matter.World.remove(this.world,t.body)}))},Simulation.prototype.makeObstaclesFrom=function(t){let e=[];return t.forEach((t=>{let i;switch(t.type){case"Rectangle":i=Block;break;case"Circle":i=Ball;break;case"Spawnpoint":return this.spawn.x=t.x,void(this.spawn.y=t.y)}delete t.type,t.color="#222",e.push(new i(this.world,t,{isStatic:!0}))})),e.push(makeGround(this)),e},Simulation.prototype.reloadSimulation=function(t){this.cycles=1,this.mutationRate=t.metrics.mutationRate||1.5,this.distance=t.metrics.distance||1e3,this.roundTime=t.metrics.roundTime||2500,this.firstGenPop=t.metrics.firstPopulation||128,this.genPop=t.metrics.population||48,this._timer=0,this.offset=0,this.running=!0,this.currentGen=0,this.currentIndex=0,this.bests=[],this.bestIndex=0,this.bestScore=0;let e=this.makeRandomGeneration();this.baseStats=e.defaultStats,this.graph=this.initGraph(e),console.log(this),this.creature=new Creature(this,this.offset+260,this.window.y-360,random(3,6),this.creatureConfigs[0],this.creatureConfigs),this.clearMatterBodies(this.obstacles),this.obstacles=this.makeObstaclesFrom(t.bodies)},Simulation.prototype.loadSimulation=async function(t){const e=JSON.parse(localStorage.getItem("savedSimulations"));this.reloadSimulation(e[t])},Simulation.prototype.endLine=function(){push(),fill(255),noStroke(),textSize(20),text(`Distance: ${this.distance}`,this.distance+32,this.window.y-20),stroke(255,0,0),line(this.distance,0,this.distance,this.window.y),pop()},Simulation.prototype.endMessage=function(){push(),textSize(72),textAlign(CENTER),fill(255),text("End of simulation",this.window.x/2,this.window.y/2),textSize(48),text("No creature qualified",this.window.x/2,this.window.y/2+90),pop()};class Button{constructor({x:t,y:e,w:i,h:s,event:a,text:n}){this.pos=createVector(t||0,e||0),this.size=createVector(i||50,s||50),this.color=color("#222"),this.text=n||"",this.event=a||(()=>console.log("Button Clicked!"))}update(){mouseX>this.pos.x&&mouseX<this.pos.x+this.size.x&&mouseY>this.pos.y&&mouseY<this.pos.y+this.size.y?(this.color=color("#444"),mouseIsPressed&&(this.color=color("#555"),this.event())):this.color=color("#222")}draw(){push(),fill(this.color),rect(this.pos.x,this.pos.y,this.size.x,this.size.y),fill(255),textAlign(CENTER),textSize(this.size.x/2),text(this.text,this.pos.x+this.size.x/2,this.pos.y+this.size.y/1.5),pop()}}Simulation.prototype.scoreBoard=function(){push(),noStroke(),fill(255),textSize(28),text(`Current Gen:  ${this.currentGen}`,30-this.offset,40),text(`Current Creature:  ${this.currentIndex} / ${this.creatureConfigs.length}`,30-this.offset,75),text(`Current Score:  ${round(this.creature.getPos())}`,30-this.offset,110),text(`Time:  ${round(this._timer/this.roundTime*100)} / 100`,30-this.offset,145),text(`Time Scale:  ${this.cycles}x`,30-this.offset,200),this.btnIncrementCycle.update(),this.btnDecrementCycle.update(),pop()},Simulation.prototype.getBestCreatures=function(){let t=[];for(let e=0;e<this.bests.length;e++)t.push(this.creatureConfigs[this.bests.pop()]);return t},Simulation.prototype.makeRandomGeneration=function(){this.creatureConfigs=[];let t={};for(let e=0;e<this.firstGenPop;e++){let e=Creature.genConfig(random(3,6),this.creatureConfigs);this.creatureConfigs.push(e),void 0===t[e.lastname]?t[e.lastname]=0:t[e.lastname]++}let e={...t};for(let t=0;t<this.firstGenPop;t++)e[this.creatureConfigs[t].lastname]++;return{stats:e,defaultStats:t}},Simulation.prototype.uploadGraph=function(){Server.http({ip:"127.0.0.1",port:"3000",method:"post",path:"upload",body:{graph:this.graph.toData(),meta:{currentGen:this.currentGen,currentIndex:this.currentIndex}}})},Simulation.prototype.newGeneration=function(){let t={...this.baseStats},e=this.getBestCreatures();if(this.creatureConfigs=[],0===e.length)return!0;for(let i=0;i<this.genPop;i++){let i=e[floor(random(0,e.length-.1))],s=Creature.mutateConfig(this,i);this.creatureConfigs.push(s),void 0===t[s.lastname]?t[s.lastname]=1:t[s.lastname]++}return this.distance>this.window.x-200&&(this.offset-=25),this.distance+=25,this.graph.update(t),!1};let currentGen=0,currentCreature=0,currentIndex=0;Simulation.prototype.nextCreature=function(){if(this.distance<this.creature.getPos()&&(this.bests.push(this.currentIndex),console.log(`${this.creature.config.lastname} Qualified !!!`),console.log(this.creature)),this.currentIndex++,this.currentIndex>=this.creatureConfigs.length){if(this.newGeneration())return void(this.running=!1);this.currentGen++,this.currentIndex=0,this.bests=[],console.log(`Generation ${this.currentGen}`)}return this.creature.destructor(),this.creature=new Creature(this,this.spawn.x,this.spawn.y,5,this.creatureConfigs[this.currentIndex],this.creatureConfigs),!0};let NAMES=["Michael","Christopher","Jessica","Matthew","Ashley","Jennifer","Joshua","Amanda","Daniel","David","James","Robert","John","Joseph","Andrew","Ryan","Brandon","Jason","Justin","Sarah","William","Jonathan","Stephanie","Brian","Nicole","Nicholas","Anthony","Heather","Eric","Elizabeth","Adam","Megan","Melissa","Kevin","Steven","Thomas","Timothy","Christina","Kyle","Rachel","Laura","Lauren","Amber","Brittany","Danielle","Richard","Kimberly","Jeffrey","Amy","Crystal","Michelle","Tiffany","Jeremy","Benjamin","Mark","Emily","Aaron","Charles","Rebecca","Jacob","Stephen","Patrick","Sean","Erin","Zachary","Jamie","Kelly","Samantha","Nathan","Sara","Dustin","Paul","Angela","Tyler","Scott","Katherine","Andrea","Gregory","Erica","Mary","Travis","Lisa","Kenneth","Bryan","Lindsey","Kristen","Jose","Alexander","Jesse","Katie","Lindsay","Shannon","Vanessa","Courtney","Christine","Alicia","Cody","Allison","Bradley","Samuel","Shawn","April","Derek","Kathryn","Kristin","Chad","Jenna","Tara","Maria","Krystal","Jared","Anna","Edward","Julie","Peter","Holly","Marcus","Kristina","Natalie","Jordan","Victoria","Jacqueline","Corey","Keith","Monica","Juan","Donald","Cassandra","Meghan","Joel","Shane","Phillip","Patricia","Brett","Ronald","Catherine","George","Antonio","Cynthia","Stacy","Kathleen","Raymond","Carlos","Brandi","Douglas","Nathaniel","Ian","Craig","Brandy","Alex","Valerie","Veronica","Cory","Whitney","Gary","Derrick","Philip","Luis","Diana","Chelsea","Leslie","Caitlin","Leah","Natasha","Erika","Casey","Latoya","Erik","Dana","Victor","Brent","Dominique","Frank","Brittney","Evan","Gabriel","Julia","Candice","Karen","Melanie","Adrian","Stacey","Margaret","Sheena","Wesley","Vincent","Alexandra","Katrina","Bethany","Nichole","Larry","Jeffery","Curtis","Carrie","Todd","Blake","Christian","Randy","Dennis","Alison","Trevor","Seth","Kara","Joanna","Rachael","Luke","Felicia","Brooke","Austin","Candace","Jasmine","Jesus","Alan","Susan","Sandra","Tracy","Kayla","Nancy","Tina","Krystle","Russell","Jeremiah","Carl","Miguel","Tony","Alexis","Gina","Jillian","Pamela","Mitchell","Hannah","Renee","Denise","Molly","Jerry","Misty","Mario","Johnathan","Jaclyn","Brenda","Terry","Lacey","Shaun","Devin","Heidi","Troy","Lucas","Desiree","Jorge","Andre","Morgan","Drew","Sabrina","Miranda","Alyssa","Alisha","Teresa","Johnny","Meagan","Allen","Krista","Marc","Tabitha","Lance","Ricardo","Martin","Chase","Theresa","Melinda","Monique","Tanya","Linda","Kristopher","Bobby","Caleb","Ashlee","Kelli","Henry","Garrett","Mallory","Jill","Jonathon","Kristy","Anne","Francisco","Danny","Robin","Lee","Tamara","Manuel","Meredith","Colleen","Lawrence","Christy","Ricky","Randall","Marissa","Ross","Mathew","Jimmy","Abigail","Kendra","Carolyn","Billy","Deanna","Jenny","Jon","Albert","Taylor","Lori","Rebekah","Cameron","Ebony","Wendy","Angel","Micheal","Kristi","Caroline","Colin","Dawn","Kari","Clayton","Arthur","Roger","Roberto","Priscilla","Darren","Kelsey","Clinton","Walter","Louis","Barbara","Isaac","Cassie","Grant","Cristina","Tonya","Rodney","Bridget","Joe","Cindy","Oscar","Willie","Maurice","Jaime","Angelica","Sharon","Julian","Jack","Jay","Calvin","Marie","Hector","Kate","Adrienne","Tasha","Michele","Ana","Stefanie","Cara","Alejandro","Ruben","Gerald","Audrey","Kristine","Ann","Shana","Javier","Katelyn","Brianna","Bruce","Deborah","Claudia","Carla","Wayne","Roy","Virginia","Haley","Brendan","Janelle","Jacquelyn","Beth","Edwin","Dylan","Dominic","Latasha","Darrell","Geoffrey","Savannah","Reginald","Carly","Fernando","Ashleigh","Aimee","Regina","Mandy","Sergio","Rafael","Pedro","Janet","Kaitlin","Frederick","Cheryl","Autumn","Tyrone","Martha","Omar","Lydia","Jerome","Theodore","Abby","Neil","Shawna","Sierra","Nina","Tammy","Nikki","Terrance","Donna","Claire","Cole","Trisha","Bonnie","Diane","Summer","Carmen","Mayra","Jermaine","Eddie","Micah","Marvin","Levi","Emmanuel","Brad","Taryn","Toni","Jessie","Evelyn","Darryl","Ronnie","Joy","Adriana","Ruth","Mindy","Spencer","Noah","Raul","Suzanne","Sophia","Dale","Jodi","Christie","Raquel","Naomi","Kellie","Ernest","Jake","Grace","Tristan","Shanna","Hilary","Eduardo","Ivan","Hillary","Yolanda","Alberto","Andres","Olivia","Armando","Paula","Amelia","Sheila","Rosa","Robyn","Kurt","Dane","Glenn","Nicolas","Gloria","Eugene","Logan","Steve","Ramon","Bryce","Tommy","Preston","Keri","Devon","Alana","Marisa","Melody","Rose","Barry","Marco","Karl","Daisy","Leonard","Randi","Maggie","Charlotte"],LAST_NAMES=["SMITH","JOHNSON","WILLIAMS","JONES","BROWN","DAVIS","MILLER","WILSON","MOORE","TAYLOR","ANDERSON","THOMAS","JACKSON","WHITE","HARRIS","MARTIN","THOMPSON","GARCIA","MARTINEZ","ROBINSON","CLARK","RODRIGUEZ","LEWIS","LEE","WALKER","HALL","ALLEN","YOUNG","HERNANDEZ","KING","WRIGHT","LOPEZ","HILL","SCOTT","GREEN","ADAMS","BAKER","GONZALEZ","NELSON","CARTER","MITCHELL","PEREZ","ROBERTS","TURNER","PHILLIPS","CAMPBELL","PARKER","EVANS","EDWARDS","COLLINS","STEWART","SANCHEZ","MORRIS","ROGERS","REED","COOK","MORGAN","BELL","MURPHY","BAILEY","RIVERA","COOPER","RICHARDSON","COX","HOWARD","WARD","TORRES","PETERSON","GRAY","RAMIREZ","JAMES","WATSON","BROOKS","KELLY","SANDERS","PRICE","BENNETT","WOOD","BARNES","ROSS","HENDERSON","COLEMAN","JENKINS","PERRY","POWELL","LONG","PATTERSON","HUGHES","FLORES","WASHINGTON","BUTLER","SIMMONS","FOSTER","GONZALES","BRYANT","ALEXANDER","RUSSELL","GRIFFIN","DIAZ","HAYES","MYERS","FORD","HAMILTON","GRAHAM","SULLIVAN","WALLACE","WOODS","COLE","WEST","JORDAN","OWENS","REYNOLDS","FISHER","ELLIS","HARRISON","GIBSON","MCDONALD","CRUZ","MARSHALL","ORTIZ","GOMEZ","MURRAY","FREEMAN","WELLS","WEBB","SIMPSON","STEVENS","TUCKER","PORTER","HUNTER","HICKS","CRAWFORD","HENRY","BOYD","MASON","MORALES","KENNEDY","WARREN","DIXON","RAMOS","REYES","BURNS","GORDON","SHAW","HOLMES","RICE","ROBERTSON","HUNT","BLACK","DANIELS","PALMER","MILLS","NICHOLS","GRANT","KNIGHT","FERGUSON","ROSE","STONE","HAWKINS","DUNN","PERKINS","HUDSON","SPENCER","GARDNER","STEPHENS","PAYNE","PIERCE","BERRY","MATTHEWS","ARNOLD","WAGNER","WILLIS","RAY","WATKINS","OLSON","CARROLL","DUNCAN","SNYDER","HART","CUNNINGHAM","BRADLEY","LANE","ANDREWS","RUIZ","HARPER","FOX","RILEY","ARMSTRONG","CARPENTER","WEAVER","GREENE","LAWRENCE","ELLIOTT","CHAVEZ","SIMS","AUSTIN","PETERS","KELLEY","FRANKLIN","LAWSON","FIELDS","GUTIERREZ","RYAN","SCHMIDT","CARR","VASQUEZ","CASTILLO","WHEELER","CHAPMAN","OLIVER","MONTGOMERY","RICHARDS","WILLIAMSON","JOHNSTON","BANKS","MEYER","BISHOP","MCCOY","HOWELL","ALVAREZ","MORRISON","HANSEN","FERNANDEZ","GARZA","HARVEY","LITTLE","BURTON","STANLEY","NGUYEN","GEORGE","JACOBS","REID","KIM","FULLER","LYNCH","DEAN","GILBERT","GARRETT","ROMERO","WELCH","LARSON","FRAZIER","BURKE","HANSON","DAY","MENDOZA","MORENO","BOWMAN","MEDINA","FOWLER","BREWER","HOFFMAN","CARLSON","SILVA","PEARSON","HOLLAND","DOUGLAS","FLEMING","JENSEN","VARGAS","BYRD","DAVIDSON","HOPKINS","MAY","TERRY","HERRERA","WADE","SOTO","WALTERS","CURTIS","NEAL","CALDWELL","LOWE","JENNINGS","BARNETT","GRAVES","JIMENEZ","HORTON","SHELTON","BARRETT","OBRIEN","CASTRO","SUTTON","GREGORY","MCKINNEY","LUCAS","MILES","CRAIG","RODRIQUEZ","CHAMBERS","HOLT","LAMBERT","FLETCHER","WATTS","BATES","HALE","RHODES","PENA","BECK","NEWMAN","HAYNES","MCDANIEL","MENDEZ","BUSH","VAUGHN","PARKS","DAWSON","SANTIAGO","NORRIS","HARDY","LOVE","STEELE","CURRY","POWERS","SCHULTZ","BARKER","GUZMAN","PAGE","MUNOZ","BALL","KELLER","CHANDLER","WEBER","LEONARD","WALSH","LYONS","RAMSEY","WOLFE","SCHNEIDER","MULLINS","BENSON","SHARP","BOWEN","DANIEL","BARBER","CUMMINGS","HINES","BALDWIN","GRIFFITH","VALDEZ","HUBBARD","SALAZAR","REEVES","WARNER","STEVENSON","BURGESS","SANTOS","TATE","CROSS","GARNER","MANN","MACK","MOSS","THORNTON","DENNIS","MCGEE","FARMER","DELGADO","AGUILAR","VEGA","GLOVER","MANNING","COHEN","HARMON","RODGERS","ROBBINS","NEWTON","TODD","BLAIR","HIGGINS","INGRAM","REESE","CANNON","STRICKLAND","TOWNSEND","POTTER","GOODWIN","WALTON","ROWE","HAMPTON","ORTEGA","PATTON","SWANSON","JOSEPH","FRANCIS","GOODMAN","MALDONADO","YATES","BECKER","ERICKSON","HODGES","RIOS","CONNER","ADKINS","WEBSTER","NORMAN","MALONE","HAMMOND","FLOWERS","COBB","MOODY","QUINN","BLAKE","MAXWELL","POPE","FLOYD","OSBORNE","PAUL","MCCARTHY","GUERRERO","LINDSEY","ESTRADA","SANDOVAL","GIBBS","TYLER","GROSS","FITZGERALD","STOKES","DOYLE","SHERMAN","SAUNDERS","WISE","COLON","GILL","ALVARADO","GREER","PADILLA","SIMON","WATERS","NUNEZ","BALLARD","SCHWARTZ","MCBRIDE","HOUSTON","CHRISTENSEN","KLEIN","PRATT","BRIGGS","PARSONS","MCLAUGHLIN","ZIMMERMAN","FRENCH","BUCHANAN","MORAN","COPELAND","ROY","PITTMAN","BRADY","MCCORMICK","HOLLOWAY","BROCK","POOLE","FRANK","LOGAN","OWEN","BASS","MARSH","DRAKE","WONG","JEFFERSON","PARK","MORTON","ABBOTT","SPARKS","PATRICK","NORTON","HUFF","CLAYTON","MASSEY","LLOYD","FIGUEROA","CARSON","BOWERS","ROBERSON","BARTON","TRAN","LAMB","HARRINGTON","CASEY","BOONE","CORTEZ","CLARKE","MATHIS","SINGLETON","WILKINS","CAIN","BRYAN","UNDERWOOD","HOGAN","MCKENZIE","COLLIER","LUNA","PHELPS","MCGUIRE","ALLISON","BRIDGES","WILKERSON","NASH","SUMMERS","ATKINS","WILCOX","PITTS","CONLEY","MARQUEZ","BURNETT","RICHARD","COCHRAN","CHASE","DAVENPORT","HOOD","GATES","CLAY","AYALA","SAWYER","ROMAN","VAZQUEZ","DICKERSON","HODGE","ACOSTA","FLYNN","ESPINOZA","NICHOLSON","MONROE","WOLF","MORROW","KIRK","RANDALL","ANTHONY","WHITAKER","OCONNOR","SKINNER","WARE","MOLINA","KIRBY","HUFFMAN","BRADFORD","CHARLES","GILMORE","DOMINGUEZ","ONEAL","BRUCE","LANG","COMBS","KRAMER","HEATH","HANCOCK","GALLAGHER","GAINES","SHAFFER","SHORT","WIGGINS","MATHEWS","MCCLAIN","FISCHER","WALL","SMALL","MELTON","HENSLEY","BOND","DYER","CAMERON","GRIMES","CONTRERAS","CHRISTIAN","WYATT","BAXTER","SNOW","MOSLEY","SHEPHERD","LARSEN","HOOVER","BEASLEY","GLENN","PETERSEN","WHITEHEAD","MEYERS","KEITH","GARRISON","VINCENT","SHIELDS","HORN","SAVAGE","OLSEN","SCHROEDER","HARTMAN","WOODARD","MUELLER","KEMP","DELEON","BOOTH","PATEL","CALHOUN","WILEY","EATON","CLINE","NAVARRO","HARRELL","LESTER","HUMPHREY","PARRISH","DURAN","HUTCHINSON","HESS","DORSEY","BULLOCK","ROBLES","BEARD","DALTON","AVILA","VANCE","RICH","BLACKWELL","YORK","JOHNS","BLANKENSHIP","TREVINO","SALINAS","CAMPOS","PRUITT","MOSES","CALLAHAN","GOLDEN","MONTOYA","HARDIN","GUERRA","MCDOWELL","CAREY","STAFFORD","GALLEGOS","HENSON","WILKINSON","BOOKER","MERRITT","MIRANDA","ATKINSON","ORR","DECKER","HOBBS","PRESTON","TANNER","KNOX","PACHECO","STEPHENSON","GLASS","ROJAS","SERRANO","MARKS","HICKMAN","ENGLISH","SWEENEY","STRONG","PRINCE","MCCLURE","CONWAY","WALTER","ROTH","MAYNARD","FARRELL","LOWERY","HURST","NIXON","WEISS","TRUJILLO","ELLISON","SLOAN","JUAREZ","WINTERS","MCLEAN","RANDOLPH","LEON","BOYER","VILLARREAL","MCCALL","GENTRY","CARRILLO","KENT","AYERS","LARA","SHANNON","SEXTON","PACE","HULL","LEBLANC","BROWNING","VELASQUEZ","LEACH","CHANG","HOUSE","SELLERS","HERRING","NOBLE","FOLEY","BARTLETT","MERCADO","LANDRY","DURHAM","WALLS","BARR","MCKEE","BAUER","RIVERS","EVERETT","BRADSHAW","PUGH","VELEZ","RUSH","ESTES","DODSON","MORSE","SHEPPARD","WEEKS","CAMACHO","BEAN","BARRON","LIVINGSTON","MIDDLETON","SPEARS","BRANCH","BLEVINS","CHEN","KERR","MCCONNELL","HATFIELD","HARDING","ASHLEY","SOLIS","HERMAN","FROST","GILES","BLACKBURN","WILLIAM","PENNINGTON","WOODWARD","FINLEY","MCINTOSH","KOCH","BEST","SOLOMON","MCCULLOUGH","DUDLEY","NOLAN","BLANCHARD","RIVAS","BRENNAN","MEJIA","KANE","BENTON","JOYCE","BUCKLEY","HALEY","VALENTINE","MADDOX","RUSSO","MCKNIGHT","BUCK","MOON","MCMILLAN","CROSBY","BERG","DOTSON","MAYS","ROACH","CHURCH","CHAN","RICHMOND","MEADOWS","FAULKNER","ONEILL","KNAPP","KLINE","BARRY","OCHOA","JACOBSON","GAY","AVERY","HENDRICKS","HORNE","SHEPARD","HEBERT","CHERRY","CARDENAS","MCINTYRE","WHITNEY","WALLER","HOLMAN","DONALDSON","CANTU","TERRELL","MORIN","GILLESPIE","FUENTES","TILLMAN","SANFORD","BENTLEY","PECK","KEY","SALAS","ROLLINS","GAMBLE","DICKSON","BATTLE","SANTANA","CABRERA","CERVANTES","HOWE","HINTON","HURLEY","SPENCE","ZAMORA","YANG","MCNEIL","SUAREZ","CASE","PETTY","GOULD","MCFARLAND","SAMPSON","CARVER","BRAY","ROSARIO","MACDONALD","STOUT","HESTER","MELENDEZ","DILLON","FARLEY","HOPPER","GALLOWAY","POTTS","BERNARD","JOYNER","STEIN","AGUIRRE","OSBORN","MERCER","BENDER","FRANCO","ROWLAND","SYKES","BENJAMIN","TRAVIS","PICKETT","CRANE","SEARS","MAYO","DUNLAP","HAYDEN","WILDER","MCKAY","COFFEY","MCCARTY","EWING","COOLEY","VAUGHAN","BONNER","COTTON","HOLDER","STARK","FERRELL","CANTRELL","FULTON","LYNN","LOTT","CALDERON","ROSA","POLLARD","HOOPER","BURCH","MULLEN","FRY","RIDDLE","LEVY","DAVID","DUKE","ODONNELL","GUY","MICHAEL","BRITT","FREDERICK","DAUGHERTY","BERGER","DILLARD","ALSTON","JARVIS","FRYE","RIGGS","CHANEY","ODOM","DUFFY","FITZPATRICK","VALENZUELA","MERRILL","MAYER","ALFORD","MCPHERSON","ACEVEDO","DONOVAN","BARRERA","ALBERT","COTE","REILLY","COMPTON","RAYMOND","MOONEY","MCGOWAN","CRAFT","CLEVELAND","CLEMONS","WYNN","NIELSEN","BAIRD","STANTON","SNIDER","ROSALES","BRIGHT","WITT","STUART","HAYS","HOLDEN","RUTLEDGE","KINNEY","CLEMENTS","CASTANEDA","SLATER","HAHN","EMERSON","CONRAD","BURKS","DELANEY","PATE","LANCASTER","SWEET","JUSTICE","TYSON","SHARPE","WHITFIELD","TALLEY","MACIAS","IRWIN","BURRIS","RATLIFF","MCCRAY","MADDEN","KAUFMAN","BEACH","GOFF","CASH","BOLTON","MCFADDEN","LEVINE","GOOD","BYERS","KIRKLAND","KIDD","WORKMAN","CARNEY","DALE","MCLEOD","HOLCOMB","ENGLAND","FINCH","HEAD","BURT","HENDRIX","SOSA","HANEY","FRANKS","SARGENT","NIEVES","DOWNS","RASMUSSEN","BIRD","HEWITT","LINDSAY","LE","FOREMAN","VALENCIA","ONEIL","DELACRUZ","VINSON","DEJESUS","HYDE","FORBES","GILLIAM","GUTHRIE","WOOTEN","HUBER","BARLOW","BOYLE","MCMAHON","BUCKNER","ROCHA","PUCKETT","LANGLEY","KNOWLES","COOKE","VELAZQUEZ","WHITLEY","NOEL","VANG","SHEA","ROUSE","HARTLEY","MAYFIELD","ELDER","RANKIN","HANNA","COWAN","LUCERO","ARROYO","SLAUGHTER","HAAS","OCONNELL","MINOR","KENDRICK","SHIRLEY","KENDALL","BOUCHER","ARCHER","BOGGS","ODELL","DOUGHERTY","ANDERSEN","NEWELL","CROWE","WANG","FRIEDMAN","BLAND","SWAIN","HOLLEY","FELIX","PEARCE","CHILDS","YARBROUGH","GALVAN","PROCTOR","MEEKS","LOZANO","MORA","RANGEL","BACON","VILLANUEVA","SCHAEFER","ROSADO","HELMS","BOYCE","GOSS","STINSON","SMART","LAKE","IBARRA","HUTCHINS","COVINGTON","REYNA","GREGG","WERNER","CROWLEY","HATCHER","MACKEY","BUNCH","WOMACK","POLK"];function exists(t,e){return Object.values(e).map((t=>t.lastname)).includes(t)}function getLastName(t){let e;do{let t=LAST_NAMES[floor(random(0,LAST_NAMES.length-1))];t=t.toLocaleLowerCase();let i=t.split("");i[0]=i[0].toLocaleUpperCase(),e=i.join("")}while(exists(e,t));return e}function makeGround(t){let e=new Block(t.world,{x:t.window.x,y:t.window.y+190,w:10*t.window.x,h:500,color:"#222"},{isStatic:!0});return e.body.friction=1,e.body.frictionStatic=1,e}function makeObstacles(t){let e=[];for(let i=0;i<64;i++)e.push(new Block(t.world,{x:random(0,(i+1)/8*t.distance)+900,y:t.window.y-random(-40,10),w:random(110,150),h:random(110,150),color:"#222"},{isStatic:!0,angle:HALF_PI/random(1.1,1.2)}));return e}class Creature{constructor(t,e=0,i=0,s=2,a,n){this.simulation=t,this.masses=[],this.pos=createVector(e,i),this.name=NAMES[floor(random(0,NAMES.length-1))],this.heartBeats=[],this.rad=260,this.config={},void 0===a&&((a={}).n=s),void 0===a.beats&&(a=this.initConfig(s,n)),this.init(a)}getPos(){return this.masses[0].body.position.x}initConfig(t,e){return Creature.genConfig(t,e)}getConfig(){return this.config}init({links:t,beats:e,lastname:i}){this.config={links:t,beats:e,lastname:i,n:e.length};for(let t=0;t<e.length;t++){this.masses.push(new Ball(this.simulation.world,{x:random(this.pos.x-this.rad,this.pos.x+this.rad),y:random(this.pos.y-this.rad,this.pos.y+this.rad),r:8,color:"white",mass:100})),this.heartBeats[t]=e[t];let i=floor(100*e[t].friction+155).toString(16);this.masses[t].body.frictionStatic=e[t].friction,this.masses[t].body.friction=e[t].friction,this.masses[t].attributes.color=`#${i}${i}${i}`,this.masses[t].body.slop=.9,this.masses[t].body.density=1/0,this.masses[t].body.restitution=1}for(let e=0;e<t.length;e++)this.masses[t[e].A].constrainTo(this.masses[t[e].B],{length:this.heartBeats[t[e].A].initial,stiffness:this.heartBeats[t[e].A].stiffness,damping:this.heartBeats[t[e].A].damping})}static genConfig(t,e){let i=[],s=[];for(let e=0;e<t;e++){s.push({rate:random(4,64),current:0,initial:random(14,90),stiffness:random(.05,.1),damping:random(0,1.5),friction:random(0,1),mass:random(100,800),contraction:random(.87,.99)});for(let a=0;a<floor(random(2,t+1));a++){let a=0;do{a=floor(random(0,t))}while(a===e);i.push({A:e,B:a,data:{length:s[e].initial,stiffness:s[e].stiffness,damping:s[e].damping}})}}return{links:i,beats:s,n:t,lastname:getLastName(e)}}destructor(){this.masses.forEach((t=>{t.constraints.forEach((t=>{Matter.World.remove(this.simulation.world,t)})),Matter.World.remove(this.simulation.world,t.body)}))}static getAvailableMutationName(t,e,i){let s=` ${String.fromCharCode(i)}`;for(;void 0!==t[e+s];)s=` ${String.fromCharCode(i)}`,i++;return s}static mutateConfig(t,e){const i={...e};i.beats=[...e.beats],i.links=[...e.links],i.beats.map((t=>{let e={...t};return e.rate=t.rate+t.rate/100*(0==round(random(0,1))?-1:1),e.mass=t.mass+t.mass/100*(0==round(random(0,1))?-1:1),e.initial=t.initial+t.initial/100*(0==round(random(0,1))?-1:1),e.friction=t.friction+t.friction/100*(0==round(random(0,1))?-1:1),e.damping=t.damping+t.damping/100*(0==round(random(0,1))?-1:1),e}));let s=random(0,100)<t.mutationRate,a=random(0,100)<2*t.mutationRate;if(s){i.beats.push({rate:random(4,64),current:0,initial:random(12,160),stiffness:random(.05,.1),damping:random(0,1.5),friction:random(0,1),mass:random(10,1500),contraction:random(.9,1.1)});for(let t=0;t<floor(random(1,i.n));t++){let t=0;do{t=floor(random(0,i.n))}while(t===i.beats.length-1);i.links.push({A:i.beats.length-1,B:t,data:{length:i.beats[i.beats.length-1].initial,stiffness:i.beats[i.beats.length-1].stiffness,damping:i.beats[i.beats.length-1].damping}})}i.n++,i.lastname+=Creature.getAvailableMutationName(t.baseStats,i.lastname,97),t.graph.insert(i.lastname,1),t.baseStats[i.lastname]=0}else if(a){for(let t=0;t<floor(random(1,i.n));t++){let t=floor(random(0,i.n)),e=0;do{e=floor(random(0,i.n))}while(t===e);i.links.push({A:t,B:e,data:{length:i.beats[t].initial,stiffness:i.beats[t].stiffness,damping:i.beats[t].damping}})}i.lastname+=Creature.getAvailableMutationName(t.baseStats,i.lastname,97),t.graph.insert(i.lastname,1),t.baseStats[i.lastname]=0}return i}update(){this.masses.forEach(((t,e)=>{this.heartBeats[e].rate<=this.heartBeats[e].current?(t.constraints.forEach((t=>{t.length=this.heartBeats[e].initial})),this.heartBeats[e].current=0):this.heartBeats[e].rate<this.heartBeats[e].current+10&&this.heartBeats[e].rate>this.heartBeats[e].current?(t.constraints.forEach((t=>{t.length*=this.heartBeats[e].contraction})),this.heartBeats[e].current++):this.heartBeats[e].current++}))}draw(){push(),fill(255),textSize(32),noStroke(),text(`${this.name} ${this.config.lastname}`,this.masses[0].body.position.x,this.masses[0].body.position.y-100),pop(),this.masses.forEach((t=>t.drawConstraints())),this.masses.forEach((t=>t.draw()))}}function setup(){simulation=new Simulation({distance:800,roundTime:3e3,mutationRate:2.5,firstPopulation:256,population:128}),createCanvas(simulation.window.x,simulation.window.y)}function draw(){background(51),simulation.events(),simulation.update(),simulation.draw()}